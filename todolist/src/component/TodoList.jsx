import { useState, useEffect } from 'react';
import axios from 'axios';

const API_URL = 'https://6808318f942707d722dd86b9.mockapi.io/todo';

function TodoList() {
  const [todos, setTodos] = useState([]);
  const [newTodo, setNewTodo] = useState('');
  const [filter, setFilter] = useState('all'); // all | completed | incomplete

  // L·∫•y d·ªØ li·ªáu t·ª´ API
  useEffect(() => {
    axios.get(API_URL)
      .then(response => setTodos(response.data))
      .catch(error => console.error('L·ªói khi t·∫£i d·ªØ li·ªáu:', error));
  }, []);

  // Th√™m c√¥ng vi·ªác m·ªõi
  const handleAdd = async () => {
    if (newTodo.trim() === '') return;

    const todo = {
      text: newTodo,
      completed: false
    };

    try {
      const response = await axios.post(API_URL, todo);
      setTodos([...todos, response.data]);
      setNewTodo('');
    } catch (error) {
      console.error('L·ªói khi th√™m c√¥ng vi·ªác:', error);
    }
  };

  // Xo√° c√¥ng vi·ªác
  const handleDelete = async (id) => {
    try {
      await axios.delete(`${API_URL}/${id}`);
      setTodos(todos.filter(todo => todo.id !== id));
    } catch (error) {
      console.error('L·ªói khi xo√° c√¥ng vi·ªác:', error);
    }
  };

  // Toggle ho√†n th√†nh c√¥ng vi·ªác
  const handleToggleComplete = async (id, currentStatus) => {
    try {
      const response = await axios.put(`${API_URL}/${id}`, {
        completed: !currentStatus
      });

      setTodos(
        todos.map(todo =>
          todo.id === id ? { ...todo, completed: response.data.completed } : todo
        )
      );
    } catch (error) {
      console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i c√¥ng vi·ªác:', error);
    }
  };

  // L·ªçc danh s√°ch c√¥ng vi·ªác
  const filteredTodos = todos.filter(todo => {
    if (filter === 'completed') return todo.completed;
    if (filter === 'incomplete') return !todo.completed;
    return true; // 'all'
  });

  // T√≠nh t·ªïng s·ªë c√¥ng vi·ªác v√† s·ªë c√¥ng vi·ªác ho√†n th√†nh
  const totalTodos = todos.length;
  const completedTodos = todos.filter(todo => todo.completed).length;

  return (
    <div style={{ padding: '20px' }}>
      <h1>üìã Danh s√°ch c√¥ng vi·ªác</h1>

      {/* Hi·ªÉn th·ªã t·ªïng s·ªë c√¥ng vi·ªác v√† s·ªë c√¥ng vi·ªác ho√†n th√†nh */}
      <div style={{ marginBottom: '15px' }}>
        <p>
          <strong>T·ªïng:</strong> {totalTodos} | <strong>Ho√†n th√†nh:</strong> {completedTodos}
        </p>
      </div>

      {/* Form th√™m c√¥ng vi·ªác */}
      <div style={{ marginBottom: '10px' }}>
        <input
          type="text"
          value={newTodo}
          onChange={(e) => setNewTodo(e.target.value)}
          placeholder="Nh·∫≠p c√¥ng vi·ªác..."
        />
        <button onClick={handleAdd}>Th√™m</button>
      </div>

      {/* B·ªô l·ªçc c√¥ng vi·ªác */}
      <div style={{ marginBottom: '15px' }}>
        <button onClick={() => setFilter('all')} style={{ marginRight: '8px' }}>
          T·∫•t c·∫£
        </button>
        <button onClick={() => setFilter('completed')} style={{ marginRight: '8px' }}>
          ƒê√£ ho√†n th√†nh
        </button>
        <button onClick={() => setFilter('incomplete')}>
          Ch∆∞a ho√†n th√†nh
        </button>
      </div>

      {/* Danh s√°ch c√¥ng vi·ªác */}
      <ul>
        {filteredTodos.map(todo => (
          <li key={todo.id}>
            <input
              type="checkbox"
              checked={todo.completed}
              onChange={() => handleToggleComplete(todo.id, todo.completed)}
            />
            <span style={{ marginLeft: '8px' }}>{todo.text}</span> - 
            <strong>{todo.completed ? 'Ho√†n th√†nh' : 'Ch∆∞a ho√†n th√†nh'}</strong>
            <button onClick={() => handleDelete(todo.id)} style={{ marginLeft: '10px' }}>
              Xo√°
            </button>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default TodoList;
